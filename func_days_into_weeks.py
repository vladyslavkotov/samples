import numpy as np,time,datetime
from func import *

'''
Another interesting function that creates weekly candles from dailys. Weeks can be asymmetrical due to holidays, but they always are divided at the days which consecutive number is less than the previous.
'''

np.set_printoptions(threshold=np. inf)
np.set_printoptions(formatter={'all': lambda x: str(x)})

stock="aapl"

l1 = np.genfromtxt(f'storage/{stock}_d.csv')

print(f'no duplicates d--{len(ar_duplicate_days_daily(l1)) == 0}')

l2=list(map(list,l1))

c1=[]
c2=[]
c3=[]
c4=[]

i=0

for g,x in enumerate(l2):
    if x[6]>i:
        c1.append(x)
        i=x[6]
    elif x[6]<i:
        c2.append(c1)
        c1=[]
        c1.append(x)
        i = x[6]
c2.append(c1)

c2=map(np.array,c2)

for a in c2: #a is 2d ndarray
    c3.append(a[0, 0])  # open
    c3.append(np.max(a[:, 1]))  # high
    c3.append(np.min(a[:, 2]))  # low
    c3.append(a[-1, 3])
    c3.append(np.sum(a[:, 4]))
    c3.append(a[0, 5])
    c4.append(c3)
    c3 = []

c4=np.array(c4)

for x in c4:
    print(x)

'''
sample input

167.38 168.41 166.24 167.84 46030800.0 20220824.0 3.0 0.0
169.02 170.35 167.11 170.2 43596300.0 20220825.0 4.0 0.0
170.0 171.13 162.3 162.47 66524500.0 20220826.0 5.0 0.0
161.98 163.62 159.82 161.79 61398800.0 20220829.0 1.0 0.0
161.82 163.34 157.72 158.97 65058600.0 20220830.0 2.0 0.0
159.91 160.76 155.77 156.0 74595600.0 20220831.0 3.0 0.0
156.0 158.7 154.67 158.62 64567100.0 20220901.0 4.0 0.0
157.86 160.37 154.96 155.65 67438200.0 20220902.0 5.0 0.0
156.22 157.88 153.69 154.49 62709000.0 20220906.0 2.0 0.0
154.66 156.67 153.61 156.04 77260800.0 20220907.0 3.0 0.0
156.4 159.0 152.68 154.6 72073500.0 20220908.0 4.0 0.0
155.3 157.82 154.46 157.5 57846800.0 20220909.0 5.0 0.0
158.02 164.26 157.61 164.15 88834400.0 20220912.0 1.0 0.0
164.07 164.9 153.37 154.26 106799400.0 20220913.0 2.0 0.0
154.9 157.1 153.25 155.99 75380900.0 20220914.0 3.0 0.0
156.0 156.15 151.1 151.35 76502400.0 20220915.0 4.0 0.0
151.35 151.55 148.37 151.3 144522400.0 20220916.0 5.0 0.0
149.97 155.01 148.71 155.01 70257900.0 20220919.0 1.0 0.0
154.54 158.08 153.08 156.49 95008500.0 20220920.0 2.0 0.0
157.39 158.74 152.22 152.45 87211000.0 20220921.0 3.0 0.0
153.02 154.96 150.91 153.0 75929900.0 20220922.0 4.0 0.0
152.33 152.55 148.56 150.57 81979400.0 20220923.0 5.0 0.0
149.66 153.78 149.64 150.77 71627100.0 20220926.0 1.0 0.0
152.74 154.72 149.94 151.76 64908700.0 20220927.0 2.0 0.0
147.64 150.65 144.84 149.84 111713600.0 20220928.0 3.0 0.0
146.1 146.72 140.68 142.48 99465700.0 20220929.0 4.0 0.0
141.21 143.1 138.0 138.2 87983000.0 20220930.0 5.0 0.0
138.26 143.07 137.68 142.45 82741200.0 20221003.0 1.0 0.0
145.03 146.22 144.26 146.1 63572300.0 20221004.0 2.0 0.0
144.07 147.38 143.01 146.4 62940300.0 20221005.0 3.0 0.0
145.89 147.54 145.22 145.43 51807300.0 20221006.0 4.0 0.0
142.58 143.1 139.44 140.09 60800100.0 20221007.0 5.0 0.0
140.42 141.89 138.57 140.42 58799600.0 20221010.0 1.0 0.0

sample output

[139.02 147.55 136.93 146.78 242738100.0 20220705.0]
[145.98 150.86 142.12 150.03 313385300.0 20220711.0]
[150.61 156.28 146.3 153.93 310622000.0 20220718.0]
[154.12 164.01 150.8 162.15 314504100.0 20220725.0]
[161.98 167.19 159.55 164.9 264721800.0 20220801.0]
[166.24 172.17 163.25 171.9 260993800.0 20220808.0]
[171.37 176.15 170.7 170.75 269639800.0 20220815.0]
[170.29 171.13 162.3 162.47 257706600.0 20220822.0]
[161.98 163.62 154.67 155.65 333058300.0 20220829.0]
[156.22 159.0 152.68 157.5 269890100.0 20220906.0]
[158.02 164.9 148.37 151.3 492039500.0 20220912.0]
[149.97 158.74 148.56 150.57 410386700.0 20220919.0]
[149.66 154.72 138.0 138.2 435698100.0 20220926.0]
[138.26 147.54 137.68 140.09 321861200.0 20221003.0]

'''